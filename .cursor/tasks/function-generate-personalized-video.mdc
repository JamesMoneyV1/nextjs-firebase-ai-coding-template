---
description: Create callable function to generate personalized video from uploaded source
globs:
alwaysApply: false
---

id: "TASK-0003"
title: "Add callable: generate_personalized_video"
status: "planned"
priority: "P0"
labels: ["backend", "functions", "firebase", "storage"]
created: "2025-08-23"

# 1) High-Level Objective

Expose a Firebase callable function that takes a user-uploaded video path, a first name, and an ElevenLabs Voice ID, and returns a processed video with the greeting replaced plus a download URL.

# 2) Background / Context (Optional but recommended)

See `.cursor/rules/PRD.mdc` â€” MVP single-video flow: upload, input first name + Voice ID, receive processed video link.

# 3) Assumptions & Constraints

- ASSUMPTION: Source video is already uploaded by client to `users/{uid}/files/...` in Firebase Storage.
- Constraint: Function runs within Firebase Functions (Python) temp storage limits; clean up temp files.
- Constraint: Use signed URLs only for returning download links or write to `public/personalized/{uid}/...` and return that path plus signed URL via `Db.get_file_url`.

# 4) Dependencies (Other Tasks or Artifacts)

- tasks/backend-elevenlabs-tts-client.mdc
- tasks/backend-ffmpeg-audio-replacement.mdc
- files/back/src/apis/Db.py
- files/back/src/apis/APIWrapperBase.py

# 5) Context Plan

**Beginning (add to model context):**

- back/src/apis/Db.py
- back/src/brokers/callable/example*callable.py *(pattern reference)\_
- back/main.py _(export patterns)_

**End state (must exist after completion):**

- back/src/brokers/callable/generate_personalized_video.py
- back/main.py (exports updated)
- back/tests/integration/test_generate_personalized_video.py

# 6) Low-Level Steps (Ordered, information-dense)

1. Create callable `back/src/brokers/callable/generate_personalized_video.py`:

   - Name: `generate_personalized_video`
   - Request schema:
     ```json
     {
       "sourceStoragePath": "users/{uid}/files/<file>",
       "firstName": "Sarah",
       "voiceId": "<ELEVEN_VOICE_ID>",
       "segmentDurationSec": 1.5
     }
     ```
   - Response schema:
     ```json
     {
       "outputStoragePath": "public/personalized/{uid}/<basename>_Sarah.mp4",
       "downloadUrl": "https://...signed..."
     }
     ```
   - Steps:
     - Authenticate user via `db_auth_wrapper`.
     - Validate `sourceStoragePath` belongs to `uid`.
     - Download source file to `/tmp/<uuid>.mp4`.
     - Instantiate API wrapper: `from src.apis.elevenlabs_api import ElevenLabsAPI`; `tts_bytes = ElevenLabsAPI().synthesize_name(voice_id, f"Hey {firstName}!")`.
     - Process via `replace_greeting_segment(...)` to `/tmp/<uuid>-out.mp4`.
     - Upload output to `public/personalized/{uid}/<basename>_<firstName>.mp4`.
     - Get signed URL via `Db.get_file_url(outputStoragePath)`.
     - Return response and clean temp files.

2. Wire export in `back/main.py` `__all__` and module import.

3. Add integration test `back/tests/integration/test_generate_personalized_video.py`:
   - Mock ElevenLabs synthesis and FFmpeg pipeline; assert storage interactions and response format.
   - Unauthorized access returns `HttpsError(PERMISSION_DENIED)`.

# 7) Types & Interfaces (if applicable)

```py
# Callable request -> response
class GenerateVideoRequest(TypedDict):
    sourceStoragePath: str
    firstName: str
    voiceId: str
    segmentDurationSec: float

class GenerateVideoResponse(TypedDict):
    outputStoragePath: str
    downloadUrl: str
```

# 8) Acceptance Criteria

- Deployed function `generate_personalized_video` callable from web.
- Returns valid `outputStoragePath` and signed `downloadUrl` for authenticated user.
- Integration tests pass under emulator with mocks.

# 9) Usage Examples (CLI/API)

Frontend will call via Firebase callable; see related frontend task.

# 10) Notes / Links

- Firebase Functions Python callable pattern mirrors `example_callable`.
