---
description: Implement ElevenLabs TTS client for name synthesis per PRD
globs:
alwaysApply: false
---

id: "TASK-0001"
title: "Implement ElevenLabs TTS client in Python"
status: "planned"
priority: "P0"
labels: ["backend", "functions", "ai", "tts", "elevenlabs"]
created: "2025-08-23"

# 1) High-Level Objective

Provide a Python client to synthesize natural-sounding audio for greetings like "Hey {firstName}" using an ElevenLabs Voice ID.

# 2) Background / Context (Optional but recommended)

See `.cursor/rules/PRD.mdc` — MVP requires generating AI voice for the prospect’s name and replacing it in the uploaded video.

# 3) Assumptions & Constraints

- ASSUMPTION: ElevenLabs API key is stored as secret `ELEVENLABS_API_KEY` in GCP Secret Manager; for local dev, read from env.
- Constraint: Use only deps in `back/requirements.txt` (use `httpx` for HTTP calls).
- Constraint: Keep API timeouts ≤ 30s; retry transient 5xx.

# 4) Dependencies (Other Tasks or Artifacts)

- tasks/backend-secrets-and-config.mdc

# 5) Context Plan

**Beginning (add to model context):**

- back/src/apis/Db.py
- back/requirements.txt _(read-only)_

**End state (must exist after completion):**

- back/src/apis/elevenlabs_api.py
- back/src/apis/**init**.py
- back/tests/unit/test_elevenlabs_api.py

# 6) Low-Level Steps (Ordered, information-dense)

1. Create wrapper class `back/src/apis/elevenlabs_api.py` implementing `BaseAPIWrapper`:

   ```py
   from typing import Optional
   import os
   import httpx
   from src.apis.APIWrapperBase import BaseAPIWrapper
   from src.apis.Db import Db

   DEFAULT_ELEVEN_MODEL = "eleven_multilingual_v2"

   class ElevenLabsAPI(BaseAPIWrapper):
       def _setup(self) -> None:
           self.base_url: str = self.config.get("endpoint", "https://api.elevenlabs.io")
           self.api_key: Optional[str] = self.config.get("api_key") or os.getenv("ELEVENLABS_API_KEY")
           self.client = httpx.Client(base_url=self.base_url)

       def synthesize_name(
           self,
           voice_id: str,
           text: str,
           *,
           model: str = DEFAULT_ELEVEN_MODEL,
           output_format: str = "mp3_44100_128",
           stability: float = 0.5,
           similarity_boost: float = 0.75,
           style: Optional[float] = None,
           use_speaker_boost: bool = True,
           language_code: Optional[str] = None,
           timeout_sec: int = 30,
       ) -> bytes:
           if not self.api_key:
               import asyncio
               self.api_key = asyncio.run(Db.get_secret("ELEVENLABS_API_KEY"))

           headers = {"xi-api-key": self.api_key}
           if output_format.startswith("mp3_"):
               headers["Accept"] = "audio/mpeg"

           payload = {
               "text": text,
               "model_id": model,
               "output_format": output_format,
               "voice_settings": {
                   "stability": stability,
                   "similarity_boost": similarity_boost,
                   "use_speaker_boost": use_speaker_boost,
               },
           }
           if style is not None:
               payload["voice_settings"]["style"] = style
           if language_code:
               payload["language_code"] = language_code

           url = f"/v1/text-to-speech/{voice_id}"
           resp = self.client.post(url, json=payload, headers=headers, timeout=timeout_sec)
           if resp.status_code >= 400:
               raise RuntimeError(f"ElevenLabs error {resp.status_code}: {resp.text}")
           return resp.content
   ```

   - Wrap all ElevenLabs calls through `ElevenLabsAPI(BaseAPIWrapper)` per project rule.
   - API key resolution: config → env → Secret Manager (lazy).
   - Endpoint and request body per docs; include `model_id`, `output_format`, `voice_settings`.
   - Handle non-2xx by raising exceptions; later extend with 429/5xx retries honoring `Retry-After`.

2. Update `back/src/apis/__init__.py` to export `ElevenLabsAPI` and `DEFAULT_ELEVEN_MODEL`.

3. Create unit tests `back/tests/unit/test_elevenlabs_api.py`:
   - Mock `httpx` (or `requests`) to return binary payload; assert non-empty bytes.
   - Error path: 401/403/422/429/500 -> assert raises.
   - Assert the request URL includes provided `voice_id` and header `xi-api-key` set.
   - Assert JSON contains `model_id` and `output_format` with expected defaults.

# 7) Types & Interfaces (if applicable)

```py
# back/src/apis/elevenlabs_api.py
class ElevenLabsAPI(BaseAPIWrapper):
    def synthesize_name(self, voice_id: str, text: str, *, model: str = "eleven_multilingual_v2", output_format: str = "mp3_44100_128", stability: float = 0.5, similarity_boost: float = 0.75, style: float | None = None, use_speaker_boost: bool = True, language_code: str | None = None, timeout_sec: int = 30) -> bytes: ...
```

# 8) Acceptance Criteria

- `back/src/apis/elevenlabs_api.py` defines `class ElevenLabsAPI(BaseAPIWrapper)` with `synthesize_name(...)` method signature above.
- All tests in `back/tests/unit/test_elevenlabs_api.py` pass locally and in CI.
- Network errors and non-2xx responses raise informative exceptions.

# 9) Usage Examples (CLI/API)

```py
api = ElevenLabsAPI()
audio_bytes = api.synthesize_name(voice_id="<VOICE_ID>", text="Hey Sarah!")
```

# 10) Notes / Links

- ElevenLabs Create speech API: [Text to Speech — Create speech](https://elevenlabs.io/docs/api-reference/text-to-speech/convert)
