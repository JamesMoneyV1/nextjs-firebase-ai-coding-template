---
description: Add integration/E2E tests to validate single-video personalization flow
globs:
alwaysApply: false
---

id: "TASK-0006"
title: "Write tests for MVP single-video flow"
status: "planned"
priority: "P1"
labels: ["tests", "integration", "e2e", "backend", "frontend"]
created: "2025-08-23"

# 1) High-Level Objective

Ensure the end-to-end MVP path works: upload video → call function → receive signed URL.

# 2) Background / Context (Optional but recommended)

Supports PRD’s Definition of Done for MVP.

# 3) Assumptions & Constraints

- ASSUMPTION: Use Firebase emulators; mock ElevenLabs and FFmpeg.
- Constraint: Keep tests deterministic; no network calls.

# 4) Dependencies (Other Tasks or Artifacts)

- tasks/function-generate-personalized-video.mdc
- tasks/frontend-video-personalizer-ui.mdc

# 5) Context Plan

**Beginning (add to model context):**

- back/tests/integration/test*item_flow.py *(pattern)\_
- back/tests/util/firebase_emulator.py

**End state (must exist after completion):**

- back/tests/integration/test_generate_personalized_video.py (if not already created)
- front/e2e/personalize.spec.ts (Playwright or Cypress; optional if not configured)

# 6) Low-Level Steps (Ordered, information-dense)

1. Backend integration test updates (or creation) for `generate_personalized_video`:

   - Mock ElevenLabs synthesis to return fixed bytes.
   - Mock FFmpeg pipeline function to write a stub output file.
   - Assert storage upload call and signed URL generation format.

2. (Optional) Frontend E2E test if framework present; otherwise skip.

# 7) Types & Interfaces (if applicable)

N/A

# 8) Acceptance Criteria

- Backend integration test passes locally with emulator using mocks.
- If FE E2E added, it confirms upload → process → link appears.

# 9) Usage Examples (CLI/API)

- Run: `cd back && uv run pytest -k generate_personalized_video -q`

# 10) Notes / Links

N/A
