---
description: Build UI to upload a single video and generate personalized output
globs:
alwaysApply: false
---

id: "TASK-0004"
title: "Create frontend UI for single-video personalization"
status: "planned"
priority: "P0"
labels: ["frontend", "nextjs", "storage", "functions"]
created: "2025-08-23"

# 1) High-Level Objective

Let a signed-in user upload one video, input a first name and ElevenLabs Voice ID, and receive a processed video download link.

# 2) Background / Context (Optional but recommended)

MVP per `.cursor/rules/PRD.mdc`: single video throughput interface.

# 3) Assumptions & Constraints

- ASSUMPTION: User must be authenticated; reuse existing `AuthProvider` and `useAuth`.
- Constraint: Use existing `useFileUpload` and `storageOperations` to upload to `users/{uid}/files`.
- Constraint: Call backend callable `generate_personalized_video` via `callFunction` helper.

# 4) Dependencies (Other Tasks or Artifacts)

- tasks/function-generate-personalized-video.mdc

# 5) Context Plan

**Beginning (add to model context):**

- front/src/lib/functions.ts
- front/src/hooks/useStorage.ts
- front/src/lib/storage.ts
- front/src/auth/useAuth.ts

**End state (must exist after completion):**

- front/src/app/personalize/page.tsx
- front/src/types/api.ts (request/response types, if not already present)

# 6) Low-Level Steps (Ordered, information-dense)

1. Add page `front/src/app/personalize/page.tsx`:

   - Components: file input (accept .mp4,.mov), text inputs for `firstName`, `voiceId`, submit button.
   - On submit:
     - Ensure `user` present from `useAuth()`; else redirect to `/signin`.
     - Use `useFileUpload().uploadFile(user.uid, file)` to upload source; capture storage path.
     - Call `callFunction<GenerateVideoRequest, GenerateVideoResponse>("generate_personalized_video", payload)`.
     - Display returned `downloadUrl` as button/link; show status and errors.
   - Add minimal Tailwind styling consistent with app.

2. Define TS types in `front/src/types/api.ts` (or reuse existing typing folder):

   ```ts
   export type GenerateVideoRequest = {
     sourceStoragePath: string;
     firstName: string;
     voiceId: string;
     segmentDurationSec?: number;
   };
   export type GenerateVideoResponse = {
     outputStoragePath: string;
     downloadUrl: string;
   };
   ```

3. Wire function call using `front/src/lib/functions.ts` helper.

4. Optional: persist recent outputs in component state and render list of links.

# 7) Types & Interfaces (if applicable)

```ts
function PersonalizePage(): JSX.Element; // default export from page.tsx
```

# 8) Acceptance Criteria

- Authenticated user can upload a video, enter name + voice ID, and receive a working download link.
- Upload progress and submission states are visible; errors surfaced to user.

# 9) Usage Examples (CLI/API)

Manual via UI at route `/personalize`.

# 10) Notes / Links

- Reuse existing storage and functions wrappers to stay DRY.
